#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright © 2016-2017 Martin Ueding <dev@martin-ueding.de>

import argparse
import os
import subprocess

import jinja2

jobscript_text = r'''#!/bin/bash 

#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --time=02:00:00
#SBATCH --partition=devel
#SBATCH --cpus-per-task=24
#SBATCH --mail-type=ALL
#SBATCH --mail-user=ueding@hiskp.uni-bonn.de

module load Intel
module load IntelMPI

export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK}
export KMP_AFFINITY=compact,0

srun ~/jureca-local-icc/bin/chroma \
        -i "{{ chroma_input }}" \
        -by 8 -bz 8 -c 24 -sy 1 -sz 1 -pxy 1 -pxyz 0 -minct 2
'''


def main():
    options = _parse_args()

    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(".")
    )
    chroma_template = env.get_template('wflow.template.xml')
    slurm_template = jinja2.Template(jobscript_text)

    for gauge_config in options.gauge_config:
        print('Working on {} …'.format(gauge_config))
        basename = os.path.basename(gauge_config)
        dirname = os.path.dirname(gauge_config)
        base, ext = os.path.splitext(basename)

        filename_xml = '{}.wflow.xml'.format(base)
        filename_chroma_input = '{}.wflow.chroma-ini.xml'.format(os.path.join(dirname, base))
        filename_slurm_input = '{}.wflow.slurm.sh'.format(os.path.join(dirname, base))

        chroma_rendered = chroma_template.render(
            config_in_file=gauge_config,
            xml_out_file=filename_xml,
        )
        slurm_rendered = slurm_template.render(
            chroma_input=filename_chroma_input,
        )

        print('Writing {} …'.format(filename_chroma_input))
        with open(filename_chroma_input, 'w') as f:
            f.write(chroma_rendered)

        print('Writing {} …'.format(filename_slurm_input))
        with open(filename_slurm_input, 'w') as f:
            f.write(slurm_rendered)


def _parse_args():
    '''
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    '''
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('gauge_config', nargs='+', help='LIME files to smear')
    options = parser.parse_args()

    return options


if __name__ == '__main__':
    main()
