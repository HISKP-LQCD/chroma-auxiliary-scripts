# Chroma Remez Coefficient Parser

## Intro

The needed coefficients for the rational approximation can be computed with the
Remez algorithm by giving the `<ratApproxType>REMEZ</ratApproxType>` option. On
startup, `hmc` will then compute the coefficients. Since those do not change
and likely are computed in a serial fashion, one should put those into the
input XML file.

## Usage

This program parses the output text log of `hmc` and generates XML snippets to
use in the next input file. Just invoke it with an output file like this:

    ./remez_parser.py hmc-338551-out.txt

The output then are two XML snippets:

    <!-- action -->
    <PFECoeffs>
        <norm>0.1555998230003145</norm>
        <res>0.000520383284200624 0.00102660572124056 0.00181178793402857 0.00321671030885498 0.00577691086696587 0.0104481579630266 0.0189694277532285 0.0345269234349506 0.0630140232665876 0.11554658170993 0.21397301598633 0.404952046467655 0.804682609571783 1.78771947718812 5.1998544047142 33.2821966055558</res>
        <pole>6.64546366309794e-05 0.000487449195727835 0.00157062032741528 0.00404382974795785 0.00956902321293471 0.0218606410513497 0.0491901693924068 0.109989034422501 0.245460798566869 0.548409030799076 1.23135074841675 2.79887228398744 6.54558220539221 16.3751974576828 48.6939394291419 253.394153115071</pole>
    </PFECoeffs>
    <IPFECoeffs>
        <norm>6.42674252912215</norm>
        <res>-7.29056568824904e-06 -3.08449297938295e-05 -9.37710341257919e-05 -0.000264162081194322 -0.000727076084674794 -0.00198489654440102 -0.00540368881578466 -0.0147100906225067 -0.0401422330222872 -0.110265593261843 -0.307507964338403 -0.887366185888659 -2.76674191920454 -10.330167418357 -60.7697414728541 -1657.35364282683</res>
        <pole>0.000130231892071377 0.000677702407873996 0.00201524287479766 0.00504156833792643 0.0117904629620992 0.0267998375299895 0.0601740637857774 0.134441019473055 0.300029909102002 0.670865752397552 1.50956231898618 3.44862785528548 8.16058094845985 21.0108066373413 67.6993629063764 496.579346046959</pole>
    </IPFECoeffs>
    <!-- force -->
    <PFECoeffs>
        <norm>0.02517732603611377</norm>
        <res>0.00938447081670725 0.0113556356385765 0.0157122457753289 0.0233704650580646 0.0359432248979228 0.0560886542713153 0.0881062194115078 0.138988372319098 0.220476881003024 0.353893180549329 0.584538806469361 1.03738468679401 2.21944414498477 8.30625906187251</res>
        <pole>5.25088256299576e-05 0.000541070967033193 0.00195024255755797 0.00552632726119316 0.0144330242366399 0.0365557187762636 0.091516089737837 0.22828194229081 0.570076879879339 1.43344757660573 3.67347605678986 9.89378007837651 30.5627463768969 149.277768177754</pole>
    </PFECoeffs>
    <IPFECoeffs>
        <norm>39.7182766178435</norm>
        <res>-2.23452961610184e-06 -1.42439478447941e-05 -6.35310799261578e-05 -0.00025967481522029 -0.00103247483279225 -0.00406693386569719 -0.0159884462327013 -0.0630641527026447 -0.251614273909366 -1.03436369354839 -4.58738368000716 -24.7646340755357 -232.527272190937 -20404.0362904484</res>
        <pole>0.000221064398288062 0.00107974589695072 0.00333542889962994 0.00898331702448543 0.0230214209006101 0.0578869292278345 0.144558083170508 0.360592329660653 0.902731531609977 2.28642309878658 5.97141617575416 16.9209721488805 60.9901510349853 628.465778925603</pole>
    </IPFECoeffs>

## Notes

The interesting snippet of the `hmc` output reads:

    Construct action rational approx= REMEZ
    GenApprox: Numerator  : -1  Denominator: 4
               Action Degree 16
    Compute partial fraction expansion
    Numerator Power=1 Denominator Power=4
    RemezGMP: approximation bounds are [0.001 , 33]
    generateApprox: Iteration 0 spread 1e+37 delta 0.25
    generateApprox: Iteration 100 spread 249401441475367 delta 0.25
    generateApprox: Iteration 200 spread 96790.5858006899 delta 0.25
    generateApprox: Iteration 300 spread 0.312800131700673 delta 0.25
    generateApprox: Iteration 400 spread 0.00205070589273769 delta 0.25
    generateApprox: Iteration 500 spread 1.55208804794981e-05 delta 0.25
    generateApprox: Iteration 600 spread 1.17594959102416e-07 delta 0.25
    generateApprox: Iteration 700 spread 8.90972984532793e-10 delta 0.25
    generateApprox: Iteration 800 spread 6.75056918336997e-12 delta 0.25
    generateApprox: Iteration 900 spread 5.11465387967911e-14 delta 0.25
    generateApprox Converged at 981 iterations, error = 5.15211405051482e-11
    root: Normalisation constant is 6.42674252912215
    root[0] = -6.64546366309794e-05
    root[1] = -0.000487449195727835
    root[2] = -0.00157062032741528
    root[3] = -0.00404382974795785
    root[4] = -0.00956902321293471
    root[5] = -0.0218606410513497
    root[6] = -0.0491901693924068
    root[7] = -0.109989034422501
    root[8] = -0.245460798566869
    root[9] = -0.548409030799076
    root[10] = -1.23135074841675
    root[11] = -2.79887228398744
    root[12] = -6.54558220539221
    root[13] = -16.3751974576828
    root[14] = -48.6939394291419
    root[15] = -253.394153115071
    pole[0] = -0.000130231892071377
    pole[1] = -0.000677702407873996
    pole[2] = -0.00201524287479766
    pole[3] = -0.00504156833792643
    pole[4] = -0.0117904629620992
    pole[5] = -0.0267998375299895
    pole[6] = -0.0601740637857774
    pole[7] = -0.134441019473055
    pole[8] = -0.300029909102002
    pole[9] = -0.670865752397552
    pole[10] = -1.50956231898618
    pole[11] = -3.44862785528548
    pole[12] = -8.16058094845985
    pole[13] = -21.0108066373413
    pole[14] = -67.6993629063764
    pole[15] = -496.579346046959
    Sign = -1
    pfe: Residue = 0.000520383284200624 Pole = 6.64546366309794e-05
    pfe: Residue = 0.00102660572124056 Pole = 0.000487449195727835
    pfe: Residue = 0.00181178793402857 Pole = 0.00157062032741528
    pfe: Residue = 0.00321671030885498 Pole = 0.00404382974795785
    pfe: Residue = 0.00577691086696587 Pole = 0.00956902321293471
    pfe: Residue = 0.0104481579630266 Pole = 0.0218606410513497
    pfe: Residue = 0.0189694277532285 Pole = 0.0491901693924068
    pfe: Residue = 0.0345269234349506 Pole = 0.109989034422501
    pfe: Residue = 0.0630140232665876 Pole = 0.245460798566869
    pfe: Residue = 0.11554658170993 Pole = 0.548409030799076
    pfe: Residue = 0.21397301598633 Pole = 1.23135074841675
    pfe: Residue = 0.404952046467655 Pole = 2.79887228398744
    pfe: Residue = 0.804682609571783 Pole = 6.54558220539221
    pfe: Residue = 1.78771947718812 Pole = 16.3751974576828
    pfe: Residue = 5.1998544047142 Pole = 48.6939394291419
    pfe: Residue = 33.2821966055558 Pole = 253.394153115071
    pfe: Residue = -7.29056568824904e-06 Pole = 0.000130231892071377
    pfe: Residue = -3.08449297938295e-05 Pole = 0.000677702407873996
    pfe: Residue = -9.37710341257919e-05 Pole = 0.00201524287479766
    pfe: Residue = -0.000264162081194322 Pole = 0.00504156833792643
    pfe: Residue = -0.000727076084674794 Pole = 0.0117904629620992
    pfe: Residue = -0.00198489654440102 Pole = 0.0267998375299895
    pfe: Residue = -0.00540368881578466 Pole = 0.0601740637857774
    pfe: Residue = -0.0147100906225067 Pole = 0.134441019473055
    pfe: Residue = -0.0401422330222872 Pole = 0.300029909102002
    pfe: Residue = -0.110265593261843 Pole = 0.670865752397552
    pfe: Residue = -0.307507964338403 Pole = 1.50956231898618
    pfe: Residue = -0.887366185888659 Pole = 3.44862785528548
    pfe: Residue = -2.76674191920454 Pole = 8.16058094845985
    pfe: Residue = -10.330167418357 Pole = 21.0108066373413
    pfe: Residue = -60.7697414728541 Pole = 67.6993629063764
    pfe: Residue = -1657.35364282683 Pole = 496.579346046959

There is another such block for the force approximation.

The last block contains the coefficients but there is no explicit mention of
the IPFE, the *inverse partial fraction expansion*. In Tom's example restart
file, there are the exact numbers but the first half is for the PFE and the
second for the IPFE. I assume that the second half should really be prefixed
with `ipfe:` and that this is a bug in the code. My script simply halves the
list of coefficients.

The normalization coefficient given seems to be the one used in the IPFE, the
inverse of that is used in the PFE. All in all I can reproduce the structure of
Tom's file.
