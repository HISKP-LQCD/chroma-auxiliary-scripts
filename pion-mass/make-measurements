#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright © 2016-2017 Martin Ueding <mu@martin-ueding.de>

import argparse
import os
import re
import subprocess

import jinja2

jobscript_text = r'''#!/bin/bash 

#SBATCH --nodes=8
#SBATCH --ntasks-per-node=2
{% if partition == 'batch' %}
#SBATCH --time=06:00:00
{% else %}
#SBATCH --time=02:00:00
{% endif %}
#SBATCH --partition={{ partition }}
#SBATCH --cpus-per-task=12
#SBATCH --output={{ template }}.slurm-%j.out.txt
#SBATCH --mail-type=FAIL,END
#SBATCH --mail-user=ueding@hiskp.uni-bonn.de

module load Intel
module load IntelMPI

set -e
set -u
set -x

export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK}
export KMP_AFFINITY=compact,0

{% for chroma_input in chroma_inputs %}
srun ~/jureca-local-icc/bin/chroma \
        -i "{{ chroma_input }}" \
        -by 6 -bz 6 -c 12 -sy 1 -sz 1 -pxy 1 -pxyz 0 -minct 1 -geom 1 1 2 8
{% endfor %}
'''


config_pattern = re.compile('(.+?)_cfg_(\d+)\.lime$')


def chunks(l, n):
    '''
    Yield successive n-sized chunks from l.

    http://stackoverflow.com/a/312464
    '''
    yield [l[0]]

    for i in range(1, len(l), n):
        yield l[i:i + n]


def main():
    options = _parse_args()

    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(os.path.dirname(__file__))
    )
    chroma_template = env.get_template(options.template + '.template.xml')
    slurm_template = jinja2.Template(jobscript_text)

    chroma_inputs = []

    for gauge_config in options.gauge_config:
        assert os.path.isfile(gauge_config), 'File {} must exist.'.format(gauge_config)
        print('Working on {} …'.format(gauge_config))
        basename = os.path.basename(gauge_config)
        dirname = os.path.dirname(gauge_config)
        base, ext = os.path.splitext(basename)

        prefix, number = config_pattern.search(gauge_config).groups()

        filename_chroma_input = '{}.config-{}.chroma-ini.xml'.format(options.template, number)

        chroma_rendered = chroma_template.render(
            config_in_file=gauge_config,
            number=number,
            L=options.L,
            T=options.T,
        )

        chroma_inputs.append(filename_chroma_input)

        print('Writing {} …'.format(filename_chroma_input))
        with open(filename_chroma_input, 'w') as f:
            f.write(chroma_rendered)

    for i, chunk in enumerate(chunks(chroma_inputs, options.package)):
        slurm_rendered = slurm_template.render(
            chroma_inputs=chunk,
            template=options.template,
            partition='devel' if i == 0 else 'batch',
        )

        filename_slurm_input = '{}.{}.slurm.sh'.format(options.template, i)

        print('Writing {} …'.format(filename_slurm_input))
        with open(filename_slurm_input, 'w') as f:
            f.write(slurm_rendered)


def _parse_args():
    '''
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    '''
    parser = argparse.ArgumentParser(
        description='''
        Takes a USQCD Chroma measurement XML template file and generates one
        file per configuration that is to be measured. Also SLURM job scripts
        are created to start all those jobs.
        ''')
    parser.add_argument('template', choices=['corr', 'stout', 'wflow'], help='Template for the measurement task to use')
    parser.add_argument('L', type=int)
    parser.add_argument('T', type=int)
    parser.add_argument('gauge_config', nargs='+', help='LIME files to smear')
    parser.add_argument('--package', type=int, default=50, help='The number of measurements that should be performed in one SLURM job (default: %(default)s)')
    options = parser.parse_args()

    return options


if __name__ == '__main__':
    main()
