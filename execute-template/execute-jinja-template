#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright Â© 2016 Martin Ueding <dev@martin-ueding.de>

import argparse
import json
import math
import subprocess

import jinja2


def main():
    options = _parse_args()

    if options.destination is None:
        template_filename = options.template + '.template.xml'
        destination_filename = options.template + '.ini.xml'
    else:
        template_filename = options.template
        desitnation_filename = options.destination

    if options.json is None:
        template_args = {}
    else:
        template_args = json.loads(options.json)



    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(".")
    )
    template = env.get_template(template_filename)

    # Rendering LaTeX document with values.
    with open(destination_filename, "w") as f:
        f.write(template.render(**template_args))
    subprocess.check_call(['vim', '-c', 'norm gg=G', '-c', 'wq', destination_filename])


def _parse_args():
    '''
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    '''
    parser = argparse.ArgumentParser(
        description='''
        Executes a Jinja 2 template (http://jinja.pocoo.org/) and stores the
        output in a second file.

        The template can already contain `macro` and `set` directives.
        Additonal variables can be passed using the `--json` argument below.
        ''')
    parser.add_argument(
        'template',
        help='Path to a template or basis name, see next argument.')
    parser.add_argument(
        'destination',
        nargs='?',
        help='''
        Path to the destination. If this artument is not given, then the
        previous argument will be understood as a basis name, the input file
        name is generated by appending `.template.xml` and the destination file
        name ends on `.ini.xml`.
        ''')
    parser.add_argument(
        '--json',
        help='''
        Additional data passed to the template. This has to be a valid JSON
        (http://json.org/) dict/hash like this: {"var1": 10, "some_list": [4,
        5, 6], "some_dict": {"I": "me", "you": "you", "he": "him"}}
        ''')
    options = parser.parse_args()

    return options


if __name__ == '__main__':
    main()
