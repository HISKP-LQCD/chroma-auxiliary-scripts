#!/bin/bash
# Copyright Â© 2016-2018 Martin Ueding <dev@martin-ueding.de>

###############################################################################
#                                 Description                                 #
###############################################################################
#
# Installs USQCD Chroma on with QPhiX on selected Intel-based supercomputers.
#
# This script will download the needed sources, configure, compile, and install
# them. After the script ran through, you will have a working installation of
# Chroma with QPhiX acceleration.
#
# If the machine of your interest is not support by this script, it should be
# fairly straightforward to add it. In the various `case` statements you need
# to add another block. The names of the module system will probably have to be
# adapted as well. In case you need to compile additional dependencies, it
# would sense to make this a conditional on the `$host` variable as well.

###############################################################################
#                             License (MIT/Expat)                             #
###############################################################################
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e
set -u

###############################################################################
#                                  Functions                                  #
###############################################################################

# Disables output of commands for the given command. This is useful for
# `module` commands because they are all sourced and pollute the screen.
silent() {
  set +x
  "$@"
  status=$?
  set -x
  return $status
}

# On some machines, the `module` command does not set the exit status when it
# fails. Also it annoyingly outputs everything on standard error. This function
# parses the output and checks for the word `error` case insensitively. The
# function will then fail. If there is a more modern `module` command (like on
# JURECA), the exit status will be set. Therefore we need to do both things.
checked-module() {
  set +x
  if ! module "$@" 2> module-load-output.txt; then
    cat module-load-output.txt
    exit 1
  fi
  set -x
  cat module-load-output.txt

  if grep -i error module-load-output.txt; then
    exit-with-error "There has been some error with 'module $*', aborting"
  fi
  rm -f module-load-output.txt
}

# Clones a git repository if the directory does not exist. It does not call
# `git pull`. After cloning, it deletes the `configure` and `Makefile` that are
# shipped by default such that they get regenerated in the next step.
clone-if-needed() {
  local url="$1"
  local dir="$2"
  local branch="$3"

  if ! [[ -d "$dir" ]]; then
      git clone "$url" --recursive -b "$branch"

      remove-configure "$dir"
  fi
}

# In a project which uses GNU Autotools, no `configure` or `Makefile` should be
# in the git repository. These files should only be shipped in a source
# distribution. Here we only use the git repositories, therefore it is wrong
# that these files are shipped. These files get generated by `autoconf` and
# `automake` and are therefore changed during the build process if the version
# of GNU Autotools on the target machine differs from the one on the
# development machine. Unfortunately these files are often checked into git,
# therefore we need to delete them.
remove-configure() {
  pushd "$1"
  if [[ -f Makefile.am ]]; then
      rm -f Makefile
  fi
  rm -f configure
  popd
}

# Runs `make && make install` with appropriate flags that make compilation
# parallel on multiple cores. A sentinel file is created such that `make` is
# not invoked once it has correctly built.
make-make-install() {
  if ! [[ -f build-succeeded ]]; then
    if ! nice make -j $_arg_make_j; then
      echo "There was issue with the compilation, doing again with single process to give readable error messages."
      print-fancy-heading "Compile again"
      make VERBOSE=1
    fi

    if ! make install; then
      echo "There was issue with the installation, doing again with single process to give readable error messages."
      print-fancy-heading "Install again"
      make install VERBOSE=1
    fi

    touch build-succeeded
    if [[ -d "$prefix/lib" ]]; then
      pushd "$prefix/lib"
      rm -f *.so *.so.*
      popd
    fi
  fi
}

# Prints a large heading such that it is clear where one is in the compilation
# process. This is not needed but occasionally helpful.
print-fancy-heading() {
  set +x
  echo "######################################################################"
  echo "# $*"
  echo "######################################################################"
  set -x

  if [[ -d "$sourcedir/$repo/.git" ]]; then
    pushd "$sourcedir/$repo"
    git branch
    popd
  fi
}

# Invokes the various commands that are needed to update the GNU Autotools
# build system. Since the submodules are also Autotools projects, these
# commands need to be invoked from the bottom up, recursively. The regular `git
# submodule foreach` will do a traversal from the top. Due to the nested nature
# of the GNU Autotools, we need to have depth-first traversal. Assuming that
# the directory names do not have anything funny in them, the parsing of the
# output can work.
autoreconf-if-needed() {
  if ! [[ -f configure ]]; then
    if [[ -f .gitmodules ]]; then
      for module in $(git submodule foreach --quiet --recursive pwd | tac); do
        pushd "$module"
        autoreconf -vif
        popd
      done
    fi

    aclocal
    autoreconf -vif
  fi
}

exit-with-error() {
  set +x
  echo
  echo 'Fatal error'
  echo '==========='
  echo
  echo "$@"
  exit 1
}

ensure-git-branch() {
  branch_actual="$(git rev-parse --abbrev-ref HEAD)"
  branch_target="$1"

  if [[ "$branch_actual" != "$branch_target" ]]; then
    # Often some files which are generated were checked into git. This means
    # that a simple build of the software would lead to changes in tracked
    # files. We need to tell git that we do not care for these changes.
    git reset HEAD --hard

    # Some files which are generated during the build process are checked in on
    # some branches but not all of them. Therefore a checkout might overwrite
    # files that are only tracked in the target branch. So we need to delete
    # all of these.
    git clean -df

    git checkout "$branch_target"
    remove-configure .
  fi
}

###############################################################################
#                              Argument Parsing                               #
###############################################################################

{{ arg_parsing }}

###############################################################################
#                              Environment Setup                              #
###############################################################################

# With `set -x`, Bash will output all commands that are run. This changes the
# output such that the number of seconds is printed out with each line. This
# will give some feeling for the time it needs to compile.
PS4='+[${SECONDS}s] '

if [[ "$_arg_verbose" = on ]]; then
  set -x
fi

# Create the target directory and then store the absolute path to this
# directory. Many compilation scripts have issues with linking to relative
# paths.
mkdir -p "$_arg_basedir"
pushd "$_arg_basedir"
basedir="$PWD"
popd

# Directory where the git repositories reside.
sourcedir="$basedir/sources"
mkdir -p "$sourcedir"

# Set all locale to C, such that compiler error messages are all in English.
# This makes debugging way easier because you can search for the messages
# online.
export LC_ALL=C

###############################################################################
#                                  Download                                   #
###############################################################################

# Download is done as an early step. This allows users to download all the
# needed files on a different machine as internet access is blocked on machines
# like Hazel Hen.

pushd "$sourcedir"

# QMP
repo=qmp
clone-if-needed https://github.com/usqcd-software/qmp.git $repo master

# libxml2
repo=libxml2
clone-if-needed https://git.gnome.org/browse/libxml2 $repo v2.9.4

# LLVM
if [[ "$_arg_qdpjit" = on ]]; then
  repo=llvm
  url=http://releases.llvm.org/6.0.0/llvm-6.0.0.src.tar.xz
  basename="${url##*/}"
  if ! [[ -d "$repo" ]]; then
    if ! [[ -f "$basename" ]]; then
      wget "$url"
    fi
  fi
fi

# QDP++
if [[ "$_arg_qdpjit" = off ]]; then
  repo=qdpxx
  clone-if-needed https://github.com/usqcd-software/qdpxx.git $repo devel
else
  repo=qdp-jit
  clone-if-needed https://github.com/fwinter/qdp-jit.git $repo llvm-cpu-inner-loop-no11-qshift
fi

# Jinja2
url='https://pypi.python.org/packages/56/e6/332789f295cf22308386cf5bbd1f4e00ed11484299c5d7383378cf48ba47/Jinja2-2.10.tar.gz'
jinja_source_archive="${url##*/}"
if ! [[ -f "$jinja_source_archive" ]]; then
  wget "$url"
fi

url='https://pypi.python.org/packages/4d/de/32d741db316d8fdb7680822dd37001ef7a448255de9699ab4bfcbdf4172b/MarkupSafe-1.0.tar.gz'
markupsafe_source_archive="${url##*/}"
if ! [[ -f "$markupsafe_source_archive" ]]; then
  wget "$url"
fi

# QPhiX
repo=qphix
clone-if-needed https://github.com/JeffersonLab/qphix.git $repo "$_arg_qphix_branch"

# GNU MP
repo=gmp
if ! [[ -d "$repo" ]];
then
  # The upstream website only has a download as an LZMA compressed file. The
  # CentOS does not provide an `lzip` command. Also, there is no module
  # available that would supply it. Building `lzip` from source seems like a
  # waste of effort. Therefore I have just repacked that on my local machine
  # and uploaded to my webspace.
  url=http://bulk.martin-ueding.de/gmp-6.1.2.tar.gz
  #url=https://gmplib.org/download/gmp/gmp-6.1.2.tar.lz

  wget "$url"
  tar -xf "${url##*/}"
  mv gmp-6.1.2 gmp
fi

# Chroma
repo=chroma
clone-if-needed https://github.com/JeffersonLab/chroma.git $repo "$_arg_chroma_branch"

if [[ "$_arg_download_only" = on ]]; then
  set +x
  echo "User wanted do download only, we are done here."
  exit 0
fi

popd

###############################################################################
#                           Compiler Flag Selection                           #
###############################################################################

case "$_arg_host" in
  hazelhen)
    isa=avx2
    compiler="${_arg_compiler:-icc}"
    ;;
  jureca)
    isa=avx2
    compiler="${_arg_compiler:-icc}"
    ;;
  jureca-booster)
    isa=avx512
    compiler="${_arg_compiler:-icc}"
    module load Architecture/KNL
    ;;
  local)
    if [[ -z "$_arg_isa" ]]; then
      exit-with-error "Builds on local machines require the -i option to be passed (ISA: avx, avx2, avx512)"
    fi
    isa=$_arg_isa
    compiler="${_arg_compiler:-gcc}"
    ;;
  marconi-a2)
    isa=avx512
    compiler="${_arg_compiler:-icc}"
    ;;
  qbig)
    isa=avx
    compiler="${_arg_compiler:-gcc}"
    ;;
  *)
    exit_with_error "The machine $_arg_machine is not supported by this script. Please use one of the supported machines (see -h for help) or ideally extend this script at https://github.com/HISKP-LQCD/chroma-auxiliary-scripts/tree/master/compilation :-)"
    ;;
esac

# Set up the chosen compiler.
case "$compiler" in
  # The cray compiler does not support half-precision data types (yet). So
  # one cannot actually use that for QPhiX right now.
  cray)
    cc_name=cc
    cxx_name=CC
    color_flags=""
    openmp_flags=""
    base_flags="-O2 -hcpu=haswell"
    c99_flags="-hstd=c99"
    cxx11_flags="-hstd=c++11"
    disable_warnings_flags=""
    qphix_flags=""
    qphix_configure=""
    ;;
  icc)
    color_flags=""
    openmp_flags="-fopenmp"
    c99_flags="-std=c99"
    cxx11_flags="-std=c++11"
    disable_warnings_flags="-Wno-all -Wno-pedantic -diag-disable 1224"
    qphix_flags="-restrict"
    # QPhiX can make use of the Intel âC Extended Array Notationâ, this
    # gets enabled here.
    qphix_configure="--enable-cean"

    case "$_arg_host" in
      jureca)
        checked-module load Intel/2018.1.163-GCC-5.4.0
        checked-module load IntelMPI/2018.1.163
        silent module list
        cc_name=mpiicc
        cxx_name=mpiicpc
        host_cxx=icpc
        base_flags="-xAVX2 -O3"
        ;;
      jureca-booster)
        checked-module use /usr/local/software/jurecabooster/OtherStages
        #checked-module load Stages/2017a
        checked-module load Intel
        #checked-module load Intel/2017.2.174-GCC-5.4.0
        checked-module load IntelMPI
        #checked-module load IntelMPI/2017.2.174
        checked-module load CMake
        silent module list
        cc_name=mpiicc
        cxx_name=mpiicpc
        host_cxx=icpc
        base_flags="-xMIC-AVX512 -O3"
        ;;
      hazelhen)
        # On Hazel Hen, the default compiler is the Cray compiler. One needs to
        # unload that and load the Intel programming environment. That should
        # also load the Intel MPI implementation.
        checked-module swap PrgEnv-cray PrgEnv-intel
        checked-module load intel/17.0.6.256
        silent module list
        # On this system, the compiler is always the same because the module
        # system loads the right one of these wrappers.
        cc_name=cc
        cxx_name=CC
        host_cxx=icpc
        base_flags="-xCORE-AVX2 -O3"
        ;;
      marconi-a2)
        checked-module load intel/pe-xe-2017--binary
        checked-module load intelmpi
        silent module list
        cc_name=mpiicc
        cxx_name=mpiicpc
        host_cxx=icpc
        base_flags="-xMIC-AVX512 -O3"
        ;;
      *)
        exit-with-error "Compiler ICC is not supported on $_arg_host."
    esac
    ;;
  gcc)
    color_flags="-fdiagnostics-color=auto"
    openmp_flags="-fopenmp"
    c99_flags="--std=c99"
    cxx11_flags="--std=c++11"
    disable_warnings_flags="-Wno-all -Wno-pedantic"
    qphix_flags="-Drestrict=__restrict__"
    qphix_configure=""

    case "$_arg_host" in
      hazelhen)
        silent module swap PrgEnv-cray PrgEnv-gnu
        silent module list
        cc_name=cc
        cxx_name=CC
        host_cxx=g++
        base_flags="-O3 -finline-limit=50000 $color_flags -march=haswell"
        ;;
      jureca)
        checked-module load GCC
        checked-module load ParaStationMPI
        silent module list
        cc_name=mpicc
        cxx_name=mpic++
        host_cxx=g++
        base_flags="-O3 -finline-limit=50000 $color_flags -march=haswell"
        ;;
      local)
        cc_name=mpicc
        cxx_name=mpic++
        host_cxx=g++
        base_flags="-O3 -finline-limit=50000 -fmax-errors=1 $color_flags -march=native"
        ;;
      marconi-a2)
        checked-module load gnu
        checked-module load ParaStationMPI
        silent module list
        cc_name=mpicc
        cxx_name=mpic++
        host_cxx=g++
        base_flags="-O3 -finline-limit=50000 -fmax-errors=1 $color_flags -march=knl"
        ;;
      qbig)
        cc_name=mpicc
        cxx_name=mpic++
        host_cxx=g++
        base_flags="-O3 -finline-limit=50000 -fmax-errors=1 $color_flags -march=sandybridge"
        ;;
      *)
        exit-with-error "Compiler GCC is not supported on $_arg_host."
    esac
    ;;
  *)
    exit-with-error 'This compiler is not supported by this script. Choose another one or add another block to the `case` in this script.'
    ;;
esac

# Show versions of compilers used.
$cc_name --version
$cxx_name --version

# Directory for the installed files (headers, libraries, executables). This
# contains the chosen compiler in the dirname such that multiple compilers can
# be used simultaneously.
prefix="$basedir/local-$compiler"
mkdir -p "$prefix"

# Directory for building. The GNU Autotools support out-of-tree builds which
# allow to use different compilers on the same codebase.
build="$basedir/build-$compiler"
mkdir -p "$build"

# The GNU Autotools install `X-config` programs that let a dependent library
# query the `CFLAGS` and `CXXFLAGS` used in the compilation. This needs to be
# in the `$PATH`, otherwise libraries cannot be found properly. In principle it
# should be sufficient to pass the installation path to the `configure` scripts
# but this has not always worked properly, therefore this additional thing.
# Additionally we might install auxiliary software like CMake on some systems,
# we want it to be preferred over the system-wide installed versions.
export PATH="$prefix/bin:$PATH"

# Basic flags that will be used for all compilations. The full path to the C
# and C++ compiler are queried here and stored. Changes in modules later on
# will not alter the compilers, therefore.
base_cxxflags="$base_flags"
base_cflags="$base_flags $c99_flags"
base_configure="--prefix=$prefix CC=$(which $cc_name) CXX=$(which $cxx_name) --enable-option-checking"

case "$_arg_host" in
  hazelhen)
    # The âhuge pagesâ are used on Hazel Hen. This leads to the inability to
    # run execute programs on the login nodes that are compiled with the MPI
    # compiler wrapper. Autotools need to be told that it cross compiles such
    # that the `./configure` script won't try to execute the test programs.
    base_configure="$base_configure --host=x86_64-linux-gnu"
    ;;
  jureca-booster|marconi-a2)
    # Marconi A2 has a cross compilation from Haswell to Knights Landing,
    # therefore one needs to tell GNU Autotools that programs compiled with the
    # target compiler cannot be executed on the host.
    base_configure="$base_configure --host=x86_64-linux-gnu"
    ;;
esac

cd "$sourcedir"

###############################################################################
#                                     QMP                                     #
###############################################################################

repo=qmp
print-fancy-heading $repo

cflags="$base_cflags $openmp_flags"
cxxflags="$base_cxxflags $openmp_flags"

pushd $repo
ensure-git-branch master
autoreconf-if-needed
popd

mkdir -p "$build/$repo"
pushd "$build/$repo"
if ! [[ -f Makefile ]]; then
  $sourcedir/$repo/configure $base_configure \
    --with-qmp-comms-type=MPI \
    CFLAGS="$cflags" CXXFLAGS="$cxxflags"
fi
make-make-install
popd

###############################################################################
#                                   libxml2                                   #
###############################################################################

repo=libxml2
print-fancy-heading $repo

case "$_arg_host" in
  hazelhen|qbig)
    cflags="$base_cflags"
    cxxflags="$base_cxxflags"
    cflags="-O3"
    cxxflags="-O3"

    pushd $repo
    if ! [[ -f configure ]]; then
      mkdir -p m4
      pushd m4
      ln -fs /usr/share/aclocal/pkg.m4 .
      popd
      NOCONFIGURE=yes ./autogen.sh
    fi
    popd

    mkdir -p "$build/$repo"
    pushd "$build/$repo"
    if ! [[ -f Makefile ]]; then
      $sourcedir/$repo/configure $base_configure \
        CC=gcc CXX=g++ \
        --without-zlib \
        --without-python \
        --without-readline \
        --without-threads \
        --without-gnu-ld \
        --without-history \
        --without-reader \
        --without-writer \
        --with-output \
        --without-ftp \
        --without-http \
        --without-pattern \
        --without-catalog \
        --without-docbook \
        --without-iconv \
        --without-schemas \
        --without-schematron \
        --without-modules \
        --without-xptr \
        --without-libz \
        --without-lzma \
        --without-xinclude \
        CFLAGS="$cflags" CXXFLAGS="$cxxflags"
    fi
    make-make-install
    popd

    libxml="$prefix"
    ;;
  jureca|jureca-booster|marconi-a2)
    cflags="$base_cflags"
    cxxflags="$base_cxxflags"

    pushd $repo
    if ! [[ -f configure ]]; then
      mkdir -p m4
      pushd m4
      ln -fs /usr/share/aclocal/pkg.m4 .
      popd
      checked-module load Autotools
      NOCONFIGURE=yes ./autogen.sh
    fi
    popd

    mkdir -p "$build/$repo"
    pushd "$build/$repo"
    if ! [[ -f Makefile ]]; then
      $sourcedir/$repo/configure $base_configure \
        --without-zlib \
        --without-python \
        --without-readline \
        --without-threads \
        --without-history \
        --without-reader \
        --without-writer \
        --with-output \
        --without-ftp \
        --without-http \
        --without-pattern \
        --without-catalog \
        --without-docbook \
        --without-iconv \
        --without-schemas \
        --without-schematron \
        --without-modules \
        --without-xptr \
        --without-xinclude \
        CFLAGS="$cflags" CXXFLAGS="$cxxflags"
    fi
    make-make-install
    popd

    libxml="$prefix"
    ;;
  local)
    libxml="/usr/include/libxml2"
    ;;
  *)
    exit-with-error "There is no libxml2 specification for machine $_arg_host. Please extent this script."
    ;;
esac

###############################################################################
#                                    LLVM                                     #
###############################################################################

if [[ "$_arg_qdpjit" = on ]]; then
  repo=llvm
  print-fancy-heading $repo

  if ! [[ -d "$repo" ]]; then
    tar -xf "$basename"
    mv llvm-6.0.0.src "$repo"
  fi

  case "$_arg_host" in
    jureca)
      checked-module load CMake
      ;;
  esac

  cflags="$base_cflags $openmp_flags"
  cxxflags="$base_cxxflags $openmp_flags $cxx11_flags"

  mkdir -p "$build/$repo"
  pushd "$build/$repo"
  if ! [[ -f Makefile ]]; then
      cmake  \
      -DCMAKE_CXX_COMPILER="$(which g++)" \
      -DLLVM_ENABLE_TERMINFO=OFF \
      -DCMAKE_C_COMPILER="$(which gcc)" \
      -DCMAKE_BUILD_TYPE=Debug \
      -DCMAKE_INSTALL_PREFIX="$prefix" \
      -DLLVM_TARGETS_TO_BUILD=X86 \
      -DLLVM_ENABLE_ZLIB=OFF \
      -DBUILD_SHARED_LIBS=ON \
      -DLLVM_ENABLE_RTTI=ON  \
      -DLLVM_ENABLE_LIBXML2=OFF \
      "$sourcedir/$repo"
  fi
  make-make-install
  popd

  # LLVM has built some shared objects (`libLLVMSupport.so.6`). Since we did
  # not install them in a standard path, we need to make sure that the dynamic
  # loader knows about our path as well. This variable needs to be exported
  # such that sub-processes inherit it.
  export LD_LIBRARY_PATH="$prefix/lib:$LD_LIBRARY_PATH"
fi

###############################################################################
#                                    QDP++                                    #
###############################################################################

if [[ "$_arg_qdpjit" = off ]]; then
  repo=qdpxx
  print-fancy-heading $repo

  cflags="$base_cflags $openmp_flags"
  cxxflags="$base_cxxflags $openmp_flags $cxx11_flags"

  pushd $repo
  autoreconf-if-needed
  popd

  # We need to make sure that the `xml2-config` program can be found by a
  # subprocess.
  if ! bash -c 'xml2-config --help'; then
    exit-with-error "For some reason the xml2-config program cannot be found in the PATH although it should be installed into a location that is installed to the PATH. The value of PATH is $PATH."
  fi

  mkdir -p "$build/$repo"
  pushd "$build/$repo"
  if ! [[ -f Makefile ]]; then
    $sourcedir/$repo/configure $base_configure \
      --enable-openmp \
      --enable-sse --enable-sse2 \
      --enable-parallel-arch=parscalar \
      --enable-parallel-io \
      --enable-precision=$_arg_precision \
      --with-libxml2="$libxml" \
      --with-qmp="$prefix" \
      CFLAGS="$cflags" CXXFLAGS="$cxxflags"
  fi
  make-make-install
  popd
fi

###############################################################################
#                                   QDP-JIT                                   #
###############################################################################

if [[ "$_arg_qdpjit" = on ]]; then
  repo=qdp-jit
  print-fancy-heading $repo

  cflags="$base_cflags $openmp_flags"
  cxxflags="$base_cxxflags $openmp_flags $cxx11_flags"

  pushd "$repo"

  # Depending on the machine architecture that we work on, we need a different
  # branch of QDP-JIT.
  case "$_arg_host" in
    jureca)
      ensure-git-branch llvm-cpu-inner-loop-no11-qshift
      ;;
    some-nvidia-machine)
      ensure-git-branch llvm-nvptx
      ;;
  esac

  autoreconf-if-needed
  popd

  mkdir -p "$build/$repo"
  pushd "$build/$repo"
  if ! [[ -f Makefile ]]; then
    $sourcedir/$repo/configure $base_configure \
      --enable-openmp \
      --enable-precision=$_arg_precision \
      --enable-llvm6-trunk \
      --with-qmp="$prefix" \
      --with-llvm="$prefix" \
      --with-libxml2="$libxml" \
      CFLAGS="$cflags" CXXFLAGS="$cxxflags"
  fi
  make-make-install
  popd
fi

###############################################################################
#                                    QPhiX                                    #
###############################################################################

repo=qphix
print-fancy-heading $repo

case "$_arg_host" in
  hazelhen)
    # There is a Python 3 installation from SLES. However, the needed PIP 3 is
    # not installed, and we need this in order to install a third-party library
    # which is not installed either. On some systems, there is no `pip3`
    # command but `puthon3 -m pip` gives access to PIP. This is unfortunately
    # not the case on this machine.
    #
    # There is quite an arrangement of Python 3 installations:
    #
    # - /usr/bin/python3 (3.4.6)
    # - /opt/python/17.11.1/bin/python3 (3.6.1)
    # - /opt/python/3.6.1.1/bin/python3 (3.6.1)
    # - /sw/hazelhen-cle6/hlrs/tools/python/3.4.3/bin/python3 (3.4.3) [tools/python]
    #
    # The last one is accessed via a module.
    #
    # We chose the Python 3.6 installation in `/opt`. This is not available as
    # a module, so we need to set the paths ourselves.

    export PATH="/opt/python/3.6.1.1/bin:$PATH"
    ;;
  jureca|jureca-booster)
    checked-module load CMake
    checked-module load Python
    ;;
  marconi-a2)
    checked-module load cmake
    checked-module load python
    ;;
esac

case "$_arg_host" in
  hazelhen|jureca|jureca-booster|marconi-a2)
    silent module list
    ;;
  *)
    ;;
esac

# Check whether Python 3 interpreter is there. The following calls Python 3 and
# lets it do explicitly nothing. That must always work. Then we output the path
# for reference.
if ! python3 -c ''; then
  exit-with-error 'Python 3 cannot be found. Please update this script such that it can be found, for instance by loading the needed module.'
fi

which python3

# We also check for the jinja2 library.
if ! python3 -c 'import jinja2'; then
  pip3 install --user "$markupsafe_source_archive"
  pip3 install --user "$jinja_source_archive"

  # Now it should work, if not, there is nothing this script can do right now.
  if ! python3 -c 'import jinja2'; then
    exit-with-error 'The Python 3 library jinja2 is not installed and could not be installed automatically. You need to manually make sure that it is installed.'
  fi
fi

cxxflags="$base_cxxflags $openmp_flags $cxx11_flags $qphix_flags"
cxx=$(which $cxx_name)

# Due to the module system, the `python3` executable can be found in the
# `$PATH`, but somehow CMake cannot find what it needs. Therefore we need to
# set those paths manually. Fortunately we can [use Python to give this to
# us](https://stackoverflow.com/a/38121972) and pass that on to CMake.
cmake_python_include_dir="$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())")"
cmake_python_library="$(python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))")"

# The tests in QPhiX currently
if [[ "$_arg_qdpjit" = on ]]; then
  qphix_testing=OFF
else
  qphix_testing=ON
fi

mkdir -p "$build/$repo"
pushd "$build/$repo"
if ! [[ -f Makefile ]]; then
  cxx=$(which $cxx_name)
  CXX=$cxx CXXFLAGS="$cxxflags" \
    cmake -Disa=$isa \
    -Dhost_cxx="$host_cxx" \
    -Dhost_cxxflags="$cxx11_flags" \
    -Drecursive_jN=$(nproc) \
    -DCMAKE_INSTALL_PREFIX="$prefix" \
    -DQDPXX_DIR="$prefix" \
    -Dclover=TRUE \
    -Dtwisted_mass=TRUE \
    -Dtm_clover=TRUE \
    -Dcean=FALSE \
    -Dmm_malloc=TRUE \
    -Dtesting="$qphix_testing" \
    -DPYTHON_INCLUDE_DIR="$cmake_python_include_dir"  \
    -DPYTHON_LIBRARY="$cmake_python_library" \
    $sourcedir/$repo
fi
make-make-install
popd

if [[ "$_arg_only_qphix" = "true" ]]; then
  echo "QPhiX is installed, user wished to abort here."
  exit 0
fi

###############################################################################
#                             GNU Multi Precision                             #
###############################################################################

repo=gmp
print-fancy-heading $repo

case "$_arg_host" in
  hazelhen)
    gmp="-lgmp"
    ;;
  jureca|jureca-booster)
    set +x
    checked-module load GMP
    set -x
    gmp="$EBROOTGMP"
    ;;
  marconi-a2|qbig)
    # The GNU MP library installed on the Marconi system, but it might be
    # linked against an older version of the standard library. Therefore we
    # compile it from scratch.

    repo=gmp
    print-fancy-heading $repo

    cflags="$base_cflags"
    cxxflags="$base_cxxflags"

    pushd "$repo"
    autoreconf-if-needed
    popd

    mkdir -p "$build/$repo"
    pushd "$build/$repo"
    if ! [[ -f Makefile ]]; then
      $sourcedir/$repo/configure $base_configure \
        CFLAGS="$cflags" CXXFLAGS="$cxxflags"
    fi
    make-make-install
    popd

    gmp="$prefix"
    ;;
  *)
    exit-with-error "There is no default setting for the gmp for machine $_arg_host, please add this to the script."
    ;;
esac

###############################################################################
#                                   Chroma                                    #
###############################################################################

repo=chroma
print-fancy-heading $repo

cflags="$base_cflags $openmp_flags"
cxxflags="$base_cxxflags $openmp_flags $cxx11_flags"

pushd $repo
autoreconf-if-needed
popd

# Select a default SoA length.
case "$_arg_host" in
  hazelhen|jureca|qbig)
    soalen=4
    inner_soalen=4
    ;;
  jureca-booster|marconi-a2)
    soalen=8
    inner_soalen=4
    ;;
  *)
    exit-with-error "There is no default setting for the soalen for machine $_arg_host, please add this to the script."
    ;;
esac

# Overwrite with the value that the user has chosen, if it is set.
soalen=${_arg_soalen:-$soalen}
inner_soalen=${_arg_soalen_inner:-$inner_soalen}

mkdir -p "$build/$repo"
pushd "$build/$repo"
if ! [[ -f Makefile ]]; then
  $sourcedir/$repo/configure $base_configure \
    --enable-openmp \
    --enable-parallel-arch=parscalar \
    --enable-parallel-io \
    --enable-precision=$_arg_precision \
    --enable-qdp-alignment=128 \
    --enable-sse2 \
    --with-gmp="$gmp" \
    --with-libxml2="$libxml" \
    --with-qdp="$prefix" \
    --with-qphix-solver="$prefix" \
    --enable-qphix-solver-compress12 \
    --enable-qphix-solver-arch=$isa \
    --enable-qphix-solver-soalen=$soalen \
    --enable-qphix-solver-inner-soalen=$inner_soalen \
    --enable-qphix-solver-inner-type=$_arg_precision_inner \
    CFLAGS="$cflags" CXXFLAGS="$cxxflags"
fi
make-make-install
popd

echo
echo "That took $SECONDS seconds."

# vim: spell sts=2 sw=2 ft=sh
