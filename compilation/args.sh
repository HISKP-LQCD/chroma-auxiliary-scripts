### START OF CODE GENERATED BY Argbash v2.5.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

begins_with_short_option()
{
  local first_option all_short_options
  all_short_options='hVmcCjiqQpPsS'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose=off
_arg_machine=
_arg_compiler=
_arg_chroma_branch="devel"
_arg_make_j=
_arg_isa=
_arg_only_qphix="no"
_arg_qphix_branch="devel"
_arg_precision="double"
_arg_precision_inner="single"
_arg_soalen=
_arg_soalen_inner=

print_help ()
{
  printf "%s\n" "Installs Chroma with dependencies from scratch"
  printf 'Usage: %s [-h|--help] [-V|--(no-)verbose] [-m|--machine <arg>] [-c|--compiler <arg>] [-C|--chroma-branch <arg>] [-j|--make-j <arg>] [-i|--isa <arg>] [-q|--only-qphix <arg>] [-Q|--qphix-branch <arg>] [-p|--precision <arg>] [-P|--precision-inner <arg>] [-s|--soalen <arg>] [-S|--soalen-inner <arg>]\n' "$0"
  printf "\t%s\n" "-h,--help: Prints help"
  printf "\t%s\n" "-V,--verbose,--no-verbose: Disable printing of Bash commands executed. By default every command that is executed will be printed on the screen. (off by default)"
  printf "\t%s\n" "-c,--compiler: Compiler family to use. (no default)"
}

parse_commandline ()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      -V|--no-verbose|--verbose)
        _arg_verbose="on"
        test "${1:0:5}" = "--no-" && _arg_verbose="off"
        ;;
      -V*)
        _arg_verbose="on"
        _next="${_key##-V}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-V" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -m|--machine)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_machine="$2"
        shift
        ;;
      --machine=*)
        _arg_machine="${_key##--machine=}"
        ;;
      -m*)
        _arg_machine="${_key##-m}"
        ;;
      -c|--compiler)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_compiler="$2"
        shift
        ;;
      --compiler=*)
        _arg_compiler="${_key##--compiler=}"
        ;;
      -c*)
        _arg_compiler="${_key##-c}"
        ;;
      -C|--chroma-branch)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_chroma_branch="$2"
        shift
        ;;
      --chroma-branch=*)
        _arg_chroma_branch="${_key##--chroma-branch=}"
        ;;
      -C*)
        _arg_chroma_branch="${_key##-C}"
        ;;
      -j|--make-j)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_make_j="$2"
        shift
        ;;
      --make-j=*)
        _arg_make_j="${_key##--make-j=}"
        ;;
      -j*)
        _arg_make_j="${_key##-j}"
        ;;
      -i|--isa)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_isa="$2"
        shift
        ;;
      --isa=*)
        _arg_isa="${_key##--isa=}"
        ;;
      -i*)
        _arg_isa="${_key##-i}"
        ;;
      -q|--only-qphix)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_only_qphix="$2"
        shift
        ;;
      --only-qphix=*)
        _arg_only_qphix="${_key##--only-qphix=}"
        ;;
      -q*)
        _arg_only_qphix="${_key##-q}"
        ;;
      -Q|--qphix-branch)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_qphix_branch="$2"
        shift
        ;;
      --qphix-branch=*)
        _arg_qphix_branch="${_key##--qphix-branch=}"
        ;;
      -Q*)
        _arg_qphix_branch="${_key##-Q}"
        ;;
      -p|--precision)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_precision="$2"
        shift
        ;;
      --precision=*)
        _arg_precision="${_key##--precision=}"
        ;;
      -p*)
        _arg_precision="${_key##-p}"
        ;;
      -P|--precision-inner)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_precision_inner="$2"
        shift
        ;;
      --precision-inner=*)
        _arg_precision_inner="${_key##--precision-inner=}"
        ;;
      -P*)
        _arg_precision_inner="${_key##-P}"
        ;;
      -s|--soalen)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_soalen="$2"
        shift
        ;;
      --soalen=*)
        _arg_soalen="${_key##--soalen=}"
        ;;
      -s*)
        _arg_soalen="${_key##-s}"
        ;;
      -S|--soalen-inner)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_soalen_inner="$2"
        shift
        ;;
      --soalen-inner=*)
        _arg_soalen_inner="${_key##--soalen-inner=}"
        ;;
      -S*)
        _arg_soalen_inner="${_key##-S}"
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ] <-- needed because of Argbash
